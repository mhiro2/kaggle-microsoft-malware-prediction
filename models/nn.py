import numpy as np
import tensorflow as tf

from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Concatenate, Flatten, Lambda
from tensorflow.keras.layers import Embedding 
from tensorflow.keras.layers import Dropout, SpatialDropout1D
from tensorflow.keras.layers import BatchNormalization
from tensorflow.keras.layers import PReLU
from tensorflow.keras.optimizers import Nadam
from tensorflow.keras.regularizers import l2
from tensorflow.keras.utils import Sequence


__all__ = ['FitDataSequence', 'PredictDataSequence', 'NNBuilder']


class NNBuilder():
    def __init__(self, embed_dims, numerical_size, lr):
        super().__init__()
        self.embed_dims = embed_dims
        self.numerical_size = numerical_size
        self.lr = lr

    def build_model(self):
        categorical_input = Input(shape=(len(self.embed_dims),))
        cat_embeds = []

        embedding_reg = 0.0002

        for i, emb_params in enumerate(self.embed_dims):
            emb_in = emb_params['in']
            emb_out = emb_params['out']

            emb_input = Lambda(lambda x: x[:, i, None])(categorical_input)
            embedding = Embedding(emb_in, emb_out, input_length=1,
                                  embeddings_regularizer=l2(embedding_reg))(emb_input)
            cat_embeds.append(embedding)

        embeds = Concatenate(axis=2)(cat_embeds)
        embeds = SpatialDropout1D(0.2)(embeds)
        embeds = Flatten()(embeds)

        numerical_input = Input(shape=(self.numerical_size,))
        nums = Dense(8)(numerical_input)
        nums = PReLU()(nums)
        nums = BatchNormalization()(nums)
        nums = Dropout(0.1)(nums)

        x = Concatenate(axis=1)([embeds, nums])
        x = Dense(128)(x)
        x = PReLU()(x)
        x = BatchNormalization()(x)
        x = Dropout(0.2)(x)
        x = Dense(32)(x)
        x = PReLU()(x)
        x = BatchNormalization()(x)
        x = Dropout(0.05)(x)
        out = Dense(1, activation='sigmoid')(x)

        model = Model([categorical_input, numerical_input], out)

        optimizer = Nadam(lr=self.lr)
        model.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])

        return model


class FitDataSequence(Sequence):
    def __init__(self, x_cat, x_num, y, batch_size):
        self.x_cat = x_cat
        self.x_num = x_num
        self.y = y
        self.batch_size = batch_size

    def __len__(self):
        return int(np.ceil(len(self.x_cat) / self.batch_size))

    def __getitem__(self, idx):
        batch_x_cat = self.x_cat[idx * self.batch_size:(idx + 1) * self.batch_size]
        batch_x_num = self.x_num[idx * self.batch_size:(idx + 1) * self.batch_size]
        batch_y = self.y[idx * self.batch_size:(idx + 1) * self.batch_size]
        return [batch_x_cat, batch_x_num], batch_y


class PredictDataSequence(Sequence):
    def __init__(self, x_cat, x_num, batch_size):
        self.x_cat = x_cat
        self.x_num = x_num
        self.batch_size = batch_size

    def __len__(self):
        return int(np.ceil(len(self.x_cat) / self.batch_size))

    def __getitem__(self, idx):
        batch_x_cat = self.x_cat[idx * self.batch_size:(idx + 1) * self.batch_size]
        batch_x_num = self.x_num[idx * self.batch_size:(idx + 1) * self.batch_size]
        return [batch_x_cat, batch_x_num]

