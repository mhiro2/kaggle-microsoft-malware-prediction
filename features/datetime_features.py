import datetime

import numpy as np
import pandas as pd

from features import Feature


class Date(Feature):
    def create_features_from_df(self, train_df, test_df):
        column = self.column
        self.train[column] = train_df['Date']
        self.test[column] = test_df['Date']


class Day(Feature):
    def create_features_from_df(self, train_df, test_df):
        column = self.column
        self.train[column] = train_df['Day']
        self.test[column] = test_df['Day']


class Hour(Feature):
    def create_features_from_df(self, train_df, test_df):
        column = self.column
        self.train[column] = train_df['Hour']
        self.test[column] = test_df['Hour']


class Minute(Feature):
    def create_features_from_df(self, train_df, test_df):
        column = self.column
        self.train[column] = train_df['Minute']
        self.test[column] = test_df['Minute']


class HourMinute(Feature):
    def create_features_from_df(self, train_df, test_df):
        column = self.column
        self.train[column] = train_df['Hour'].astype(str) + train_df['Minute'].astype(str)
        self.test[column] = test_df['Hour'].astype(str) + test_df['Minute'].astype(str)


class DayOfWeek(Feature):
    def create_features_from_df(self, train_df, test_df):
        column = self.column
        self.train[column] = train_df['DayOfWeek']
        self.test[column] = test_df['DayOfWeek']


class OSBuildReleaseYearMonth(Feature):
    def create_features_from_df(self, train_df, test_df):
        column = self.column
        self.train[column] = self._compute(train_df)
        self.test[column] = self._compute(test_df)

    def _compute(self, df):
        return df['OsBuildLab'].str.slice(start=-11, stop=-7).astype('float32')


class OSVersionNotUpdatedWeeks4(Feature):
    def create_features_from_df(self, train_df, test_df):
        column = self.column
        self.train[column] = self._compute(train_df).astype('int8')
        self.test[column] = self._compute(test_df).astype('int8')

    def _compute(self, df):
        datedict1 = np.load('./data/input/OSVersionTimestamps.npy')[()]
        datedict2 = np.load('data/input/AvSigVersionTimestamps.npy')[()]
        date1 = df['Census_OSVersion'].map(datedict1)
        date2 = df['AvSigVersion'].map(datedict2)
        return (date2 - date1) > datetime.timedelta(weeks=4)


class OSVersionNotUpdatedWeeks8(Feature):
    def create_features_from_df(self, train_df, test_df):
        column = self.column
        self.train[column] = self._compute(train_df).astype('int8')
        self.test[column] = self._compute(test_df).astype('int8')

    def _compute(self, df):
        datedict1 = np.load('./data/input/OSVersionTimestamps.npy')[()]
        datedict2 = np.load('data/input/AvSigVersionTimestamps.npy')[()]
        date1 = df['Census_OSVersion'].map(datedict1)
        date2 = df['AvSigVersion'].map(datedict2)
        return (date2 - date1) > datetime.timedelta(weeks=8)


class OSVersionNotUpdatedWeeks12(Feature):
    def create_features_from_df(self, train_df, test_df):
        column = self.column
        self.train[column] = self._compute(train_df).astype('int8')
        self.test[column] = self._compute(test_df).astype('int8')

    def _compute(self, df):
        datedict1 = np.load('./data/input/OSVersionTimestamps.npy')[()]
        datedict2 = np.load('data/input/AvSigVersionTimestamps.npy')[()]
        date1 = df['Census_OSVersion'].map(datedict1)
        date2 = df['AvSigVersion'].map(datedict2)
        return (date2 - date1) > datetime.timedelta(weeks=12)

