import json
import re
import time
from contextlib import contextmanager

import joblib
import numpy as np
import pandas as pd
from numba import jit


__all__ = ['timer', 'load_dump', 'load_train_dataset', 'load_test_dataset']


@contextmanager
def timer(name):
    t0 = time.time()
    print(f'[{name}] start')
    yield
    print(f'[{name}] done in {time.time() - t0:.0f} s')


def convert_camel_to_snake(name):
    name = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
    name = re.sub('([a-z0-9])([A-Z])', r'\1_\2', name).lower()
    return re.sub('([^0-9]+)([0-9]+$)', r'\1_\2', name)


def load_dump(path):
    return joblib.load(path)


def load_train_dataset(features):
    dfs = [pd.read_feather(f'./.cache/{f}_train.feather') for f in features]
    x_train = pd.concat(dfs, axis=1)
    return x_train


def load_test_dataset(features):
    dfs = [pd.read_feather(f'./.cache/{f}_test.feather') for f in features]
    x_test = pd.concat(dfs, axis=1)
    return x_test


@jit
def fast_auc(y_true, y_prob):
    y_true = np.asarray(y_true)
    y_true = y_true[np.argsort(y_prob)]
    nfalse = 0
    auc = 0
    n = len(y_true)
    for i in range(n):
        y_i = y_true[i]
        nfalse += (1 - y_i)
        auc += y_i * nfalse
    auc /= (nfalse * (n - nfalse))
    return auc

